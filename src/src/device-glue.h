/* Generated by dbus-binding-tool; do not edit! */


#ifndef __dbus_glib_marshal_device_MARSHAL_H__
#define __dbus_glib_marshal_device_MARSHAL_H__

#include	<glib-object.h>

G_BEGIN_DECLS

#ifdef G_ENABLE_DEBUG
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_char(v)     g_value_get_char (v)
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#else /* !G_ENABLE_DEBUG */
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
 *          Do not access GValues directly in your code. Instead, use the
 *          g_value_get_*() functions
 */
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#endif /* !G_ENABLE_DEBUG */


/* NONE:STRING,STRING,BOXED,POINTER */
extern void dbus_glib_marshal_device_VOID__STRING_STRING_BOXED_POINTER (GClosure     *closure,
                                                                        GValue       *return_value,
                                                                        guint         n_param_values,
                                                                        const GValue *param_values,
                                                                        gpointer      invocation_hint,
                                                                        gpointer      marshal_data);
void
dbus_glib_marshal_device_VOID__STRING_STRING_BOXED_POINTER (GClosure     *closure,
                                                            GValue       *return_value G_GNUC_UNUSED,
                                                            guint         n_param_values,
                                                            const GValue *param_values,
                                                            gpointer      invocation_hint G_GNUC_UNUSED,
                                                            gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_STRING_BOXED_POINTER) (gpointer     data1,
                                                                  gpointer     arg_1,
                                                                  gpointer     arg_2,
                                                                  gpointer     arg_3,
                                                                  gpointer     arg_4,
                                                                  gpointer     data2);
  register GMarshalFunc_VOID__STRING_STRING_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 5);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_STRING_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_string (param_values + 2),
            g_marshal_value_peek_boxed (param_values + 3),
            g_marshal_value_peek_pointer (param_values + 4),
            data2);
}
#define dbus_glib_marshal_device_NONE__STRING_STRING_BOXED_POINTER	dbus_glib_marshal_device_VOID__STRING_STRING_BOXED_POINTER

/* NONE:UINT64,UINT64,STRING,STRING,BOXED,BOXED,STRING,BOXED,POINTER */
extern void dbus_glib_marshal_device_VOID__UINT64_UINT64_STRING_STRING_BOXED_BOXED_STRING_BOXED_POINTER (GClosure     *closure,
                                                                                                         GValue       *return_value,
                                                                                                         guint         n_param_values,
                                                                                                         const GValue *param_values,
                                                                                                         gpointer      invocation_hint,
                                                                                                         gpointer      marshal_data);
void
dbus_glib_marshal_device_VOID__UINT64_UINT64_STRING_STRING_BOXED_BOXED_STRING_BOXED_POINTER (GClosure     *closure,
                                                                                             GValue       *return_value G_GNUC_UNUSED,
                                                                                             guint         n_param_values,
                                                                                             const GValue *param_values,
                                                                                             gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                             gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__UINT64_UINT64_STRING_STRING_BOXED_BOXED_STRING_BOXED_POINTER) (gpointer     data1,
                                                                                                   guint64      arg_1,
                                                                                                   guint64      arg_2,
                                                                                                   gpointer     arg_3,
                                                                                                   gpointer     arg_4,
                                                                                                   gpointer     arg_5,
                                                                                                   gpointer     arg_6,
                                                                                                   gpointer     arg_7,
                                                                                                   gpointer     arg_8,
                                                                                                   gpointer     arg_9,
                                                                                                   gpointer     data2);
  register GMarshalFunc_VOID__UINT64_UINT64_STRING_STRING_BOXED_BOXED_STRING_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 10);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__UINT64_UINT64_STRING_STRING_BOXED_BOXED_STRING_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_uint64 (param_values + 1),
            g_marshal_value_peek_uint64 (param_values + 2),
            g_marshal_value_peek_string (param_values + 3),
            g_marshal_value_peek_string (param_values + 4),
            g_marshal_value_peek_boxed (param_values + 5),
            g_marshal_value_peek_boxed (param_values + 6),
            g_marshal_value_peek_string (param_values + 7),
            g_marshal_value_peek_boxed (param_values + 8),
            g_marshal_value_peek_pointer (param_values + 9),
            data2);
}
#define dbus_glib_marshal_device_NONE__UINT64_UINT64_STRING_STRING_BOXED_BOXED_STRING_BOXED_POINTER	dbus_glib_marshal_device_VOID__UINT64_UINT64_STRING_STRING_BOXED_BOXED_STRING_BOXED_POINTER

/* NONE:BOXED,BOXED,POINTER */
extern void dbus_glib_marshal_device_VOID__BOXED_BOXED_POINTER (GClosure     *closure,
                                                                GValue       *return_value,
                                                                guint         n_param_values,
                                                                const GValue *param_values,
                                                                gpointer      invocation_hint,
                                                                gpointer      marshal_data);
void
dbus_glib_marshal_device_VOID__BOXED_BOXED_POINTER (GClosure     *closure,
                                                    GValue       *return_value G_GNUC_UNUSED,
                                                    guint         n_param_values,
                                                    const GValue *param_values,
                                                    gpointer      invocation_hint G_GNUC_UNUSED,
                                                    gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__BOXED_BOXED_POINTER) (gpointer     data1,
                                                          gpointer     arg_1,
                                                          gpointer     arg_2,
                                                          gpointer     arg_3,
                                                          gpointer     data2);
  register GMarshalFunc_VOID__BOXED_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__BOXED_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_boxed (param_values + 1),
            g_marshal_value_peek_boxed (param_values + 2),
            g_marshal_value_peek_pointer (param_values + 3),
            data2);
}
#define dbus_glib_marshal_device_NONE__BOXED_BOXED_POINTER	dbus_glib_marshal_device_VOID__BOXED_BOXED_POINTER

/* NONE:INT,BOXED,POINTER */
extern void dbus_glib_marshal_device_VOID__INT_BOXED_POINTER (GClosure     *closure,
                                                              GValue       *return_value,
                                                              guint         n_param_values,
                                                              const GValue *param_values,
                                                              gpointer      invocation_hint,
                                                              gpointer      marshal_data);
void
dbus_glib_marshal_device_VOID__INT_BOXED_POINTER (GClosure     *closure,
                                                  GValue       *return_value G_GNUC_UNUSED,
                                                  guint         n_param_values,
                                                  const GValue *param_values,
                                                  gpointer      invocation_hint G_GNUC_UNUSED,
                                                  gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__INT_BOXED_POINTER) (gpointer     data1,
                                                        gint         arg_1,
                                                        gpointer     arg_2,
                                                        gpointer     arg_3,
                                                        gpointer     data2);
  register GMarshalFunc_VOID__INT_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__INT_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_int (param_values + 1),
            g_marshal_value_peek_boxed (param_values + 2),
            g_marshal_value_peek_pointer (param_values + 3),
            data2);
}
#define dbus_glib_marshal_device_NONE__INT_BOXED_POINTER	dbus_glib_marshal_device_VOID__INT_BOXED_POINTER

/* NONE:STRING,STRING,POINTER */
extern void dbus_glib_marshal_device_VOID__STRING_STRING_POINTER (GClosure     *closure,
                                                                  GValue       *return_value,
                                                                  guint         n_param_values,
                                                                  const GValue *param_values,
                                                                  gpointer      invocation_hint,
                                                                  gpointer      marshal_data);
void
dbus_glib_marshal_device_VOID__STRING_STRING_POINTER (GClosure     *closure,
                                                      GValue       *return_value G_GNUC_UNUSED,
                                                      guint         n_param_values,
                                                      const GValue *param_values,
                                                      gpointer      invocation_hint G_GNUC_UNUSED,
                                                      gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_STRING_POINTER) (gpointer     data1,
                                                            gpointer     arg_1,
                                                            gpointer     arg_2,
                                                            gpointer     arg_3,
                                                            gpointer     data2);
  register GMarshalFunc_VOID__STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_string (param_values + 2),
            g_marshal_value_peek_pointer (param_values + 3),
            data2);
}
#define dbus_glib_marshal_device_NONE__STRING_STRING_POINTER	dbus_glib_marshal_device_VOID__STRING_STRING_POINTER

/* NONE:BOXED,POINTER */
extern void dbus_glib_marshal_device_VOID__BOXED_POINTER (GClosure     *closure,
                                                          GValue       *return_value,
                                                          guint         n_param_values,
                                                          const GValue *param_values,
                                                          gpointer      invocation_hint,
                                                          gpointer      marshal_data);
void
dbus_glib_marshal_device_VOID__BOXED_POINTER (GClosure     *closure,
                                              GValue       *return_value G_GNUC_UNUSED,
                                              guint         n_param_values,
                                              const GValue *param_values,
                                              gpointer      invocation_hint G_GNUC_UNUSED,
                                              gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__BOXED_POINTER) (gpointer     data1,
                                                    gpointer     arg_1,
                                                    gpointer     arg_2,
                                                    gpointer     data2);
  register GMarshalFunc_VOID__BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_boxed (param_values + 1),
            g_marshal_value_peek_pointer (param_values + 2),
            data2);
}
#define dbus_glib_marshal_device_NONE__BOXED_POINTER	dbus_glib_marshal_device_VOID__BOXED_POINTER

/* NONE:BOOLEAN,BOXED,POINTER */
extern void dbus_glib_marshal_device_VOID__BOOLEAN_BOXED_POINTER (GClosure     *closure,
                                                                  GValue       *return_value,
                                                                  guint         n_param_values,
                                                                  const GValue *param_values,
                                                                  gpointer      invocation_hint,
                                                                  gpointer      marshal_data);
void
dbus_glib_marshal_device_VOID__BOOLEAN_BOXED_POINTER (GClosure     *closure,
                                                      GValue       *return_value G_GNUC_UNUSED,
                                                      guint         n_param_values,
                                                      const GValue *param_values,
                                                      gpointer      invocation_hint G_GNUC_UNUSED,
                                                      gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__BOOLEAN_BOXED_POINTER) (gpointer     data1,
                                                            gboolean     arg_1,
                                                            gpointer     arg_2,
                                                            gpointer     arg_3,
                                                            gpointer     data2);
  register GMarshalFunc_VOID__BOOLEAN_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__BOOLEAN_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_boolean (param_values + 1),
            g_marshal_value_peek_boxed (param_values + 2),
            g_marshal_value_peek_pointer (param_values + 3),
            data2);
}
#define dbus_glib_marshal_device_NONE__BOOLEAN_BOXED_POINTER	dbus_glib_marshal_device_VOID__BOOLEAN_BOXED_POINTER

/* NONE:STRING,BOXED,POINTER */
extern void dbus_glib_marshal_device_VOID__STRING_BOXED_POINTER (GClosure     *closure,
                                                                 GValue       *return_value,
                                                                 guint         n_param_values,
                                                                 const GValue *param_values,
                                                                 gpointer      invocation_hint,
                                                                 gpointer      marshal_data);
void
dbus_glib_marshal_device_VOID__STRING_BOXED_POINTER (GClosure     *closure,
                                                     GValue       *return_value G_GNUC_UNUSED,
                                                     guint         n_param_values,
                                                     const GValue *param_values,
                                                     gpointer      invocation_hint G_GNUC_UNUSED,
                                                     gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_BOXED_POINTER) (gpointer     data1,
                                                           gpointer     arg_1,
                                                           gpointer     arg_2,
                                                           gpointer     arg_3,
                                                           gpointer     data2);
  register GMarshalFunc_VOID__STRING_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_boxed (param_values + 2),
            g_marshal_value_peek_pointer (param_values + 3),
            data2);
}
#define dbus_glib_marshal_device_NONE__STRING_BOXED_POINTER	dbus_glib_marshal_device_VOID__STRING_BOXED_POINTER

/* NONE:STRING,POINTER */
extern void dbus_glib_marshal_device_VOID__STRING_POINTER (GClosure     *closure,
                                                           GValue       *return_value,
                                                           guint         n_param_values,
                                                           const GValue *param_values,
                                                           gpointer      invocation_hint,
                                                           gpointer      marshal_data);
void
dbus_glib_marshal_device_VOID__STRING_POINTER (GClosure     *closure,
                                               GValue       *return_value G_GNUC_UNUSED,
                                               guint         n_param_values,
                                               const GValue *param_values,
                                               gpointer      invocation_hint G_GNUC_UNUSED,
                                               gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_POINTER) (gpointer     data1,
                                                     gpointer     arg_1,
                                                     gpointer     arg_2,
                                                     gpointer     data2);
  register GMarshalFunc_VOID__STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_pointer (param_values + 2),
            data2);
}
#define dbus_glib_marshal_device_NONE__STRING_POINTER	dbus_glib_marshal_device_VOID__STRING_POINTER

/* NONE:POINTER */
#define dbus_glib_marshal_device_VOID__POINTER	g_cclosure_marshal_VOID__POINTER
#define dbus_glib_marshal_device_NONE__POINTER	dbus_glib_marshal_device_VOID__POINTER

G_END_DECLS

#endif /* __dbus_glib_marshal_device_MARSHAL_H__ */

#include <dbus/dbus-glib.h>
static const DBusGMethodInfo dbus_glib_device_methods[] = {
  { (GCallback) device_job_cancel, dbus_glib_marshal_device_NONE__POINTER, 0 },
  { (GCallback) device_partition_table_create, dbus_glib_marshal_device_NONE__STRING_BOXED_POINTER, 43 },
  { (GCallback) device_partition_delete, dbus_glib_marshal_device_NONE__BOXED_POINTER, 121 },
  { (GCallback) device_partition_create, dbus_glib_marshal_device_NONE__UINT64_UINT64_STRING_STRING_BOXED_BOXED_STRING_BOXED_POINTER, 183 },
  { (GCallback) device_partition_modify, dbus_glib_marshal_device_NONE__STRING_STRING_BOXED_POINTER, 344 },
  { (GCallback) device_filesystem_create, dbus_glib_marshal_device_NONE__STRING_BOXED_POINTER, 423 },
  { (GCallback) device_filesystem_set_label, dbus_glib_marshal_device_NONE__STRING_POINTER, 497 },
  { (GCallback) device_filesystem_mount, dbus_glib_marshal_device_NONE__STRING_BOXED_POINTER, 563 },
  { (GCallback) device_filesystem_unmount, dbus_glib_marshal_device_NONE__BOXED_POINTER, 664 },
  { (GCallback) device_filesystem_check, dbus_glib_marshal_device_NONE__BOXED_POINTER, 728 },
  { (GCallback) device_filesystem_list_open_files, dbus_glib_marshal_device_NONE__POINTER, 807 },
  { (GCallback) device_luks_unlock, dbus_glib_marshal_device_NONE__STRING_BOXED_POINTER, 887 },
  { (GCallback) device_luks_lock, dbus_glib_marshal_device_NONE__BOXED_POINTER, 984 },
  { (GCallback) device_luks_change_passphrase, dbus_glib_marshal_device_NONE__STRING_STRING_POINTER, 1039 },
  { (GCallback) device_linux_md_add_spare, dbus_glib_marshal_device_NONE__BOXED_BOXED_POINTER, 1135 },
  { (GCallback) device_linux_md_expand, dbus_glib_marshal_device_NONE__BOXED_BOXED_POINTER, 1211 },
  { (GCallback) device_linux_md_remove_component, dbus_glib_marshal_device_NONE__BOXED_BOXED_POINTER, 1287 },
  { (GCallback) device_linux_md_stop, dbus_glib_marshal_device_NONE__BOXED_POINTER, 1370 },
  { (GCallback) device_linux_lvm2_lv_stop, dbus_glib_marshal_device_NONE__BOXED_POINTER, 1428 },
  { (GCallback) device_linux_md_check, dbus_glib_marshal_device_NONE__BOXED_POINTER, 1490 },
  { (GCallback) device_drive_inhibit_polling, dbus_glib_marshal_device_NONE__BOXED_POINTER, 1574 },
  { (GCallback) device_drive_uninhibit_polling, dbus_glib_marshal_device_NONE__STRING_POINTER, 1655 },
  { (GCallback) device_drive_poll_media, dbus_glib_marshal_device_NONE__POINTER, 1721 },
  { (GCallback) device_drive_eject, dbus_glib_marshal_device_NONE__BOXED_POINTER, 1769 },
  { (GCallback) device_drive_detach, dbus_glib_marshal_device_NONE__BOXED_POINTER, 1826 },
  { (GCallback) device_drive_set_spindown_timeout, dbus_glib_marshal_device_NONE__INT_BOXED_POINTER, 1884 },
  { (GCallback) device_drive_unset_spindown_timeout, dbus_glib_marshal_device_NONE__STRING_POINTER, 1989 },
  { (GCallback) device_drive_ata_smart_refresh_data, dbus_glib_marshal_device_NONE__BOXED_POINTER, 2059 },
  { (GCallback) device_drive_ata_smart_initiate_selftest, dbus_glib_marshal_device_NONE__STRING_BOXED_POINTER, 2130 },
  { (GCallback) device_drive_benchmark, dbus_glib_marshal_device_NONE__BOOLEAN_BOXED_POINTER, 2215 },
};

const DBusGObjectInfo dbus_glib_device_object_info = {
  0,
  dbus_glib_device_methods,
  30,
"org.freedesktop.UDisks.Device\0JobCancel\0A\0\0org.freedesktop.UDisks.Device\0PartitionTableCreate\0A\0scheme\0I\0s\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0PartitionDelete\0A\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0PartitionCreate\0A\0offset\0I\0t\0size\0I\0t\0type\0I\0s\0label\0I\0s\0flags\0I\0as\0options\0I\0as\0fstype\0I\0s\0fsoptions\0I\0as\0created_device\0O\0F\0N\0o\0\0org.freedesktop.UDisks.Device\0PartitionModify\0A\0type\0I\0s\0label\0I\0s\0flags\0I\0as\0\0org.freedesktop.UDisks.Device\0FilesystemCreate\0A\0fstype\0I\0s\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0FilesystemSetLabel\0A\0new_label\0I\0s\0\0org.freedesktop.UDisks.Device\0FilesystemMount\0A\0filesystem_type\0I\0s\0options\0I\0as\0mount_path\0O\0F\0N\0s\0\0org.freedesktop.UDisks.Device\0FilesystemUnmount\0A\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0FilesystemCheck\0A\0options\0I\0as\0is_clean\0O\0F\0N\0b\0\0org.freedesktop.UDisks.Device\0FilesystemListOpenFiles\0A\0processes\0O\0F\0N\0a(uus)\0\0org.freedesktop.UDisks.Device\0LuksUnlock\0A\0passphrase\0I\0s\0options\0I\0as\0cleartext_device\0O\0F\0N\0o\0\0org.freedesktop.UDisks.Device\0LuksLock\0A\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0LuksChangePassphrase\0A\0current_passphrase\0I\0s\0new_passphrase\0I\0s\0\0org.freedesktop.UDisks.Device\0LinuxMdAddSpare\0A\0component\0I\0o\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0LinuxMdExpand\0A\0components\0I\0ao\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0LinuxMdRemoveComponent\0A\0component\0I\0o\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0LinuxMdStop\0A\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0LinuxLvm2LVStop\0A\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0LinuxMdCheck\0A\0options\0I\0as\0number_of_errors\0O\0F\0N\0t\0\0org.freedesktop.UDisks.Device\0DriveInhibitPolling\0A\0options\0I\0as\0cookie\0O\0F\0N\0s\0\0org.freedesktop.UDisks.Device\0DriveUninhibitPolling\0A\0cookie\0I\0s\0\0org.freedesktop.UDisks.Device\0DrivePollMedia\0A\0\0org.freedesktop.UDisks.Device\0DriveEject\0A\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0DriveDetach\0A\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0DriveSetSpindownTimeout\0A\0timeout_seconds\0I\0i\0options\0I\0as\0cookie\0O\0F\0N\0s\0\0org.freedesktop.UDisks.Device\0DriveUnsetSpindownTimeout\0A\0cookie\0I\0s\0\0org.freedesktop.UDisks.Device\0DriveAtaSmartRefreshData\0A\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0DriveAtaSmartInitiateSelftest\0A\0test\0I\0s\0options\0I\0as\0\0org.freedesktop.UDisks.Device\0DriveBenchmark\0A\0do_write_benchmark\0I\0b\0options\0I\0as\0read_transfer_rate_results\0O\0F\0N\0a(td)\0write_transfer_rate_results\0O\0F\0N\0a(td)\0access_time_results\0O\0F\0N\0a(td)\0\0\0",
"org.freedesktop.UDisks.Device\0Changed\0org.freedesktop.UDisks.Device\0JobChanged\0\0",
"org.freedesktop.UDisks.Device\0NativePath\0org.freedesktop.UDisks.Device\0DeviceDetectionTime\0org.freedesktop.UDisks.Device\0DeviceMediaDetectionTime\0org.freedesktop.UDisks.Device\0DeviceMajor\0org.freedesktop.UDisks.Device\0DeviceMinor\0org.freedesktop.UDisks.Device\0DeviceFile\0org.freedesktop.UDisks.Device\0DeviceFilePresentation\0org.freedesktop.UDisks.Device\0DeviceFileById\0org.freedesktop.UDisks.Device\0DeviceFileByPath\0org.freedesktop.UDisks.Device\0DeviceIsSystemInternal\0org.freedesktop.UDisks.Device\0DeviceIsPartition\0org.freedesktop.UDisks.Device\0DeviceIsPartitionTable\0org.freedesktop.UDisks.Device\0DeviceIsRemovable\0org.freedesktop.UDisks.Device\0DeviceIsMediaAvailable\0org.freedesktop.UDisks.Device\0DeviceIsMediaChangeDetected\0org.freedesktop.UDisks.Device\0DeviceIsMediaChangeDetectionPolling\0org.freedesktop.UDisks.Device\0DeviceIsMediaChangeDetectionInhibitable\0org.freedesktop.UDisks.Device\0DeviceIsMediaChangeDetectionInhibited\0org.freedesktop.UDisks.Device\0DeviceIsReadOnly\0org.freedesktop.UDisks.Device\0DeviceIsDrive\0org.freedesktop.UDisks.Device\0DeviceIsOpticalDisc\0org.freedesktop.UDisks.Device\0DeviceIsMounted\0org.freedesktop.UDisks.Device\0DeviceMountPaths\0org.freedesktop.UDisks.Device\0DeviceMountedByUid\0org.freedesktop.UDisks.Device\0DeviceIsLuks\0org.freedesktop.UDisks.Device\0DeviceIsLuksCleartext\0org.freedesktop.UDisks.Device\0DeviceIsLinuxMdComponent\0org.freedesktop.UDisks.Device\0DeviceIsLinuxMd\0org.freedesktop.UDisks.Device\0DeviceIsLinuxLvm2LV\0org.freedesktop.UDisks.Device\0DeviceIsLinuxLvm2PV\0org.freedesktop.UDisks.Device\0DeviceIsLinuxDmmpComponent\0org.freedesktop.UDisks.Device\0DeviceIsLinuxDmmp\0org.freedesktop.UDisks.Device\0DeviceIsLinuxLoop\0org.freedesktop.UDisks.Device\0DeviceSize\0org.freedesktop.UDisks.Device\0DeviceBlockSize\0org.freedesktop.UDisks.Device\0DevicePresentationHide\0org.freedesktop.UDisks.Device\0DevicePresentationNopolicy\0org.freedesktop.UDisks.Device\0DevicePresentationName\0org.freedesktop.UDisks.Device\0DevicePresentationIconName\0org.freedesktop.UDisks.Device\0JobInProgress\0org.freedesktop.UDisks.Device\0JobId\0org.freedesktop.UDisks.Device\0JobInitiatedByUid\0org.freedesktop.UDisks.Device\0JobIsCancellable\0org.freedesktop.UDisks.Device\0JobPercentage\0org.freedesktop.UDisks.Device\0IdUsage\0org.freedesktop.UDisks.Device\0IdType\0org.freedesktop.UDisks.Device\0IdVersion\0org.freedesktop.UDisks.Device\0IdUuid\0org.freedesktop.UDisks.Device\0IdLabel\0org.freedesktop.UDisks.Device\0LuksHolder\0org.freedesktop.UDisks.Device\0LuksCleartextSlave\0org.freedesktop.UDisks.Device\0LuksCleartextUnlockedByUid\0org.freedesktop.UDisks.Device\0PartitionSlave\0org.freedesktop.UDisks.Device\0PartitionScheme\0org.freedesktop.UDisks.Device\0PartitionType\0org.freedesktop.UDisks.Device\0PartitionLabel\0org.freedesktop.UDisks.Device\0PartitionUuid\0org.freedesktop.UDisks.Device\0PartitionFlags\0org.freedesktop.UDisks.Device\0PartitionNumber\0org.freedesktop.UDisks.Device\0PartitionOffset\0org.freedesktop.UDisks.Device\0PartitionSize\0org.freedesktop.UDisks.Device\0PartitionAlignmentOffset\0org.freedesktop.UDisks.Device\0PartitionTableScheme\0org.freedesktop.UDisks.Device\0PartitionTableCount\0org.freedesktop.UDisks.Device\0DriveVendor\0org.freedesktop.UDisks.Device\0DriveModel\0org.freedesktop.UDisks.Device\0DriveRevision\0org.freedesktop.UDisks.Device\0DriveSerial\0org.freedesktop.UDisks.Device\0DriveWwn\0org.freedesktop.UDisks.Device\0DriveRotationRate\0org.freedesktop.UDisks.Device\0DriveWriteCache\0org.freedesktop.UDisks.Device\0DriveConnectionInterface\0org.freedesktop.UDisks.Device\0DriveConnectionSpeed\0org.freedesktop.UDisks.Device\0DriveMediaCompatibility\0org.freedesktop.UDisks.Device\0DriveMedia\0org.freedesktop.UDisks.Device\0DriveIsMediaEjectable\0org.freedesktop.UDisks.Device\0DriveCanDetach\0org.freedesktop.UDisks.Device\0DriveCanSpindown\0org.freedesktop.UDisks.Device\0DriveIsRotational\0org.freedesktop.UDisks.Device\0DriveAdapter\0org.freedesktop.UDisks.Device\0DrivePorts\0org.freedesktop.UDisks.Device\0DriveSimilarDevices\0org.freedesktop.UDisks.Device\0OpticalDiscIsBlank\0org.freedesktop.UDisks.Device\0OpticalDiscIsAppendable\0org.freedesktop.UDisks.Device\0OpticalDiscIsClosed\0org.freedesktop.UDisks.Device\0OpticalDiscNumTracks\0org.freedesktop.UDisks.Device\0OpticalDiscNumAudioTracks\0org.freedesktop.UDisks.Device\0OpticalDiscNumSessions\0org.freedesktop.UDisks.Device\0DriveAtaSmartIsAvailable\0org.freedesktop.UDisks.Device\0DriveAtaSmartTimeCollected\0org.freedesktop.UDisks.Device\0DriveAtaSmartStatus\0org.freedesktop.UDisks.Device\0DriveAtaSmartBlob\0org.freedesktop.UDisks.Device\0LinuxMdComponentLevel\0org.freedesktop.UDisks.Device\0LinuxMdComponentPosition\0org.freedesktop.UDisks.Device\0LinuxMdComponentNumRaidDevices\0org.freedesktop.UDisks.Device\0LinuxMdComponentUuid\0org.freedesktop.UDisks.Device\0LinuxMdComponentName\0org.freedesktop.UDisks.Device\0LinuxMdComponentHomeHost\0org.freedesktop.UDisks.Device\0LinuxMdComponentVersion\0org.freedesktop.UDisks.Device\0LinuxMdComponentHolder\0org.freedesktop.UDisks.Device\0LinuxMdComponentState\0org.freedesktop.UDisks.Device\0LinuxMdState\0org.freedesktop.UDisks.Device\0LinuxMdLevel\0org.freedesktop.UDisks.Device\0LinuxMdUuid\0org.freedesktop.UDisks.Device\0LinuxMdHomeHost\0org.freedesktop.UDisks.Device\0LinuxMdName\0org.freedesktop.UDisks.Device\0LinuxMdNumRaidDevices\0org.freedesktop.UDisks.Device\0LinuxMdVersion\0org.freedesktop.UDisks.Device\0LinuxMdSlaves\0org.freedesktop.UDisks.Device\0LinuxMdIsDegraded\0org.freedesktop.UDisks.Device\0LinuxMdSyncAction\0org.freedesktop.UDisks.Device\0LinuxMdSyncPercentage\0org.freedesktop.UDisks.Device\0LinuxMdSyncSpeed\0org.freedesktop.UDisks.Device\0LinuxLvm2PVUuid\0org.freedesktop.UDisks.Device\0LinuxLvm2PVNumMetadataAreas\0org.freedesktop.UDisks.Device\0LinuxLvm2PVGroupName\0org.freedesktop.UDisks.Device\0LinuxLvm2PVGroupUuid\0org.freedesktop.UDisks.Device\0LinuxLvm2PVGroupSize\0org.freedesktop.UDisks.Device\0LinuxLvm2PVGroupUnallocatedSize\0org.freedesktop.UDisks.Device\0LinuxLvm2PVGroupSequenceNumber\0org.freedesktop.UDisks.Device\0LinuxLvm2PVGroupExtentSize\0org.freedesktop.UDisks.Device\0LinuxLvm2PVGroupPhysicalVolumes\0org.freedesktop.UDisks.Device\0LinuxLvm2PVGroupLogicalVolumes\0org.freedesktop.UDisks.Device\0LinuxLvm2LVName\0org.freedesktop.UDisks.Device\0LinuxLvm2LVUuid\0org.freedesktop.UDisks.Device\0LinuxLvm2LVGroupName\0org.freedesktop.UDisks.Device\0LinuxLvm2LVGroupUuid\0org.freedesktop.UDisks.Device\0LinuxDmmpComponentHolder\0org.freedesktop.UDisks.Device\0LinuxDmmpName\0org.freedesktop.UDisks.Device\0LinuxDmmpSlaves\0org.freedesktop.UDisks.Device\0LinuxDmmpParameters\0org.freedesktop.UDisks.Device\0LinuxLoopFilename\0\0"
};

