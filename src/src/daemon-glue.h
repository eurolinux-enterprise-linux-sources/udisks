/* Generated by dbus-binding-tool; do not edit! */


#ifndef __dbus_glib_marshal_daemon_MARSHAL_H__
#define __dbus_glib_marshal_daemon_MARSHAL_H__

#include	<glib-object.h>

G_BEGIN_DECLS

#ifdef G_ENABLE_DEBUG
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_char(v)     g_value_get_char (v)
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#else /* !G_ENABLE_DEBUG */
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
 *          Do not access GValues directly in your code. Instead, use the
 *          g_value_get_*() functions
 */
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#endif /* !G_ENABLE_DEBUG */


/* NONE:INT64,INT64,POINTER */
extern void dbus_glib_marshal_daemon_VOID__INT64_INT64_POINTER (GClosure     *closure,
                                                                GValue       *return_value,
                                                                guint         n_param_values,
                                                                const GValue *param_values,
                                                                gpointer      invocation_hint,
                                                                gpointer      marshal_data);
void
dbus_glib_marshal_daemon_VOID__INT64_INT64_POINTER (GClosure     *closure,
                                                    GValue       *return_value G_GNUC_UNUSED,
                                                    guint         n_param_values,
                                                    const GValue *param_values,
                                                    gpointer      invocation_hint G_GNUC_UNUSED,
                                                    gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__INT64_INT64_POINTER) (gpointer     data1,
                                                          gint64       arg_1,
                                                          gint64       arg_2,
                                                          gpointer     arg_3,
                                                          gpointer     data2);
  register GMarshalFunc_VOID__INT64_INT64_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__INT64_INT64_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_int64 (param_values + 1),
            g_marshal_value_peek_int64 (param_values + 2),
            g_marshal_value_peek_pointer (param_values + 3),
            data2);
}
#define dbus_glib_marshal_daemon_NONE__INT64_INT64_POINTER	dbus_glib_marshal_daemon_VOID__INT64_INT64_POINTER

/* NONE:STRING,STRING,STRING,POINTER */
extern void dbus_glib_marshal_daemon_VOID__STRING_STRING_STRING_POINTER (GClosure     *closure,
                                                                         GValue       *return_value,
                                                                         guint         n_param_values,
                                                                         const GValue *param_values,
                                                                         gpointer      invocation_hint,
                                                                         gpointer      marshal_data);
void
dbus_glib_marshal_daemon_VOID__STRING_STRING_STRING_POINTER (GClosure     *closure,
                                                             GValue       *return_value G_GNUC_UNUSED,
                                                             guint         n_param_values,
                                                             const GValue *param_values,
                                                             gpointer      invocation_hint G_GNUC_UNUSED,
                                                             gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_STRING_STRING_POINTER) (gpointer     data1,
                                                                   gpointer     arg_1,
                                                                   gpointer     arg_2,
                                                                   gpointer     arg_3,
                                                                   gpointer     arg_4,
                                                                   gpointer     data2);
  register GMarshalFunc_VOID__STRING_STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 5);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_string (param_values + 2),
            g_marshal_value_peek_string (param_values + 3),
            g_marshal_value_peek_pointer (param_values + 4),
            data2);
}
#define dbus_glib_marshal_daemon_NONE__STRING_STRING_STRING_POINTER	dbus_glib_marshal_daemon_VOID__STRING_STRING_STRING_POINTER

/* NONE:STRING,STRING,BOXED,POINTER */
extern void dbus_glib_marshal_daemon_VOID__STRING_STRING_BOXED_POINTER (GClosure     *closure,
                                                                        GValue       *return_value,
                                                                        guint         n_param_values,
                                                                        const GValue *param_values,
                                                                        gpointer      invocation_hint,
                                                                        gpointer      marshal_data);
void
dbus_glib_marshal_daemon_VOID__STRING_STRING_BOXED_POINTER (GClosure     *closure,
                                                            GValue       *return_value G_GNUC_UNUSED,
                                                            guint         n_param_values,
                                                            const GValue *param_values,
                                                            gpointer      invocation_hint G_GNUC_UNUSED,
                                                            gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_STRING_BOXED_POINTER) (gpointer     data1,
                                                                  gpointer     arg_1,
                                                                  gpointer     arg_2,
                                                                  gpointer     arg_3,
                                                                  gpointer     arg_4,
                                                                  gpointer     data2);
  register GMarshalFunc_VOID__STRING_STRING_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 5);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_STRING_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_string (param_values + 2),
            g_marshal_value_peek_boxed (param_values + 3),
            g_marshal_value_peek_pointer (param_values + 4),
            data2);
}
#define dbus_glib_marshal_daemon_NONE__STRING_STRING_BOXED_POINTER	dbus_glib_marshal_daemon_VOID__STRING_STRING_BOXED_POINTER

/* NONE:BOXED,BOXED,POINTER */
extern void dbus_glib_marshal_daemon_VOID__BOXED_BOXED_POINTER (GClosure     *closure,
                                                                GValue       *return_value,
                                                                guint         n_param_values,
                                                                const GValue *param_values,
                                                                gpointer      invocation_hint,
                                                                gpointer      marshal_data);
void
dbus_glib_marshal_daemon_VOID__BOXED_BOXED_POINTER (GClosure     *closure,
                                                    GValue       *return_value G_GNUC_UNUSED,
                                                    guint         n_param_values,
                                                    const GValue *param_values,
                                                    gpointer      invocation_hint G_GNUC_UNUSED,
                                                    gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__BOXED_BOXED_POINTER) (gpointer     data1,
                                                          gpointer     arg_1,
                                                          gpointer     arg_2,
                                                          gpointer     arg_3,
                                                          gpointer     data2);
  register GMarshalFunc_VOID__BOXED_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__BOXED_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_boxed (param_values + 1),
            g_marshal_value_peek_boxed (param_values + 2),
            g_marshal_value_peek_pointer (param_values + 3),
            data2);
}
#define dbus_glib_marshal_daemon_NONE__BOXED_BOXED_POINTER	dbus_glib_marshal_daemon_VOID__BOXED_BOXED_POINTER

/* NONE:INT,BOXED,POINTER */
extern void dbus_glib_marshal_daemon_VOID__INT_BOXED_POINTER (GClosure     *closure,
                                                              GValue       *return_value,
                                                              guint         n_param_values,
                                                              const GValue *param_values,
                                                              gpointer      invocation_hint,
                                                              gpointer      marshal_data);
void
dbus_glib_marshal_daemon_VOID__INT_BOXED_POINTER (GClosure     *closure,
                                                  GValue       *return_value G_GNUC_UNUSED,
                                                  guint         n_param_values,
                                                  const GValue *param_values,
                                                  gpointer      invocation_hint G_GNUC_UNUSED,
                                                  gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__INT_BOXED_POINTER) (gpointer     data1,
                                                        gint         arg_1,
                                                        gpointer     arg_2,
                                                        gpointer     arg_3,
                                                        gpointer     data2);
  register GMarshalFunc_VOID__INT_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__INT_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_int (param_values + 1),
            g_marshal_value_peek_boxed (param_values + 2),
            g_marshal_value_peek_pointer (param_values + 3),
            data2);
}
#define dbus_glib_marshal_daemon_NONE__INT_BOXED_POINTER	dbus_glib_marshal_daemon_VOID__INT_BOXED_POINTER

/* NONE:STRING,STRING,UINT64,UINT,UINT64,UINT,BOXED,STRING,BOXED,POINTER */
extern void dbus_glib_marshal_daemon_VOID__STRING_STRING_UINT64_UINT_UINT64_UINT_BOXED_STRING_BOXED_POINTER (GClosure     *closure,
                                                                                                             GValue       *return_value,
                                                                                                             guint         n_param_values,
                                                                                                             const GValue *param_values,
                                                                                                             gpointer      invocation_hint,
                                                                                                             gpointer      marshal_data);
void
dbus_glib_marshal_daemon_VOID__STRING_STRING_UINT64_UINT_UINT64_UINT_BOXED_STRING_BOXED_POINTER (GClosure     *closure,
                                                                                                 GValue       *return_value G_GNUC_UNUSED,
                                                                                                 guint         n_param_values,
                                                                                                 const GValue *param_values,
                                                                                                 gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                                 gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_STRING_UINT64_UINT_UINT64_UINT_BOXED_STRING_BOXED_POINTER) (gpointer     data1,
                                                                                                       gpointer     arg_1,
                                                                                                       gpointer     arg_2,
                                                                                                       guint64      arg_3,
                                                                                                       guint        arg_4,
                                                                                                       guint64      arg_5,
                                                                                                       guint        arg_6,
                                                                                                       gpointer     arg_7,
                                                                                                       gpointer     arg_8,
                                                                                                       gpointer     arg_9,
                                                                                                       gpointer     arg_10,
                                                                                                       gpointer     data2);
  register GMarshalFunc_VOID__STRING_STRING_UINT64_UINT_UINT64_UINT_BOXED_STRING_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 11);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_STRING_UINT64_UINT_UINT64_UINT_BOXED_STRING_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_string (param_values + 2),
            g_marshal_value_peek_uint64 (param_values + 3),
            g_marshal_value_peek_uint (param_values + 4),
            g_marshal_value_peek_uint64 (param_values + 5),
            g_marshal_value_peek_uint (param_values + 6),
            g_marshal_value_peek_boxed (param_values + 7),
            g_marshal_value_peek_string (param_values + 8),
            g_marshal_value_peek_boxed (param_values + 9),
            g_marshal_value_peek_pointer (param_values + 10),
            data2);
}
#define dbus_glib_marshal_daemon_NONE__STRING_STRING_UINT64_UINT_UINT64_UINT_BOXED_STRING_BOXED_POINTER	dbus_glib_marshal_daemon_VOID__STRING_STRING_UINT64_UINT_UINT64_UINT_BOXED_STRING_BOXED_POINTER

/* NONE:STRING,STRING,POINTER */
extern void dbus_glib_marshal_daemon_VOID__STRING_STRING_POINTER (GClosure     *closure,
                                                                  GValue       *return_value,
                                                                  guint         n_param_values,
                                                                  const GValue *param_values,
                                                                  gpointer      invocation_hint,
                                                                  gpointer      marshal_data);
void
dbus_glib_marshal_daemon_VOID__STRING_STRING_POINTER (GClosure     *closure,
                                                      GValue       *return_value G_GNUC_UNUSED,
                                                      guint         n_param_values,
                                                      const GValue *param_values,
                                                      gpointer      invocation_hint G_GNUC_UNUSED,
                                                      gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_STRING_POINTER) (gpointer     data1,
                                                            gpointer     arg_1,
                                                            gpointer     arg_2,
                                                            gpointer     arg_3,
                                                            gpointer     data2);
  register GMarshalFunc_VOID__STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_string (param_values + 2),
            g_marshal_value_peek_pointer (param_values + 3),
            data2);
}
#define dbus_glib_marshal_daemon_NONE__STRING_STRING_POINTER	dbus_glib_marshal_daemon_VOID__STRING_STRING_POINTER

/* NONE:BOXED,POINTER */
extern void dbus_glib_marshal_daemon_VOID__BOXED_POINTER (GClosure     *closure,
                                                          GValue       *return_value,
                                                          guint         n_param_values,
                                                          const GValue *param_values,
                                                          gpointer      invocation_hint,
                                                          gpointer      marshal_data);
void
dbus_glib_marshal_daemon_VOID__BOXED_POINTER (GClosure     *closure,
                                              GValue       *return_value G_GNUC_UNUSED,
                                              guint         n_param_values,
                                              const GValue *param_values,
                                              gpointer      invocation_hint G_GNUC_UNUSED,
                                              gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__BOXED_POINTER) (gpointer     data1,
                                                    gpointer     arg_1,
                                                    gpointer     arg_2,
                                                    gpointer     data2);
  register GMarshalFunc_VOID__BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_boxed (param_values + 1),
            g_marshal_value_peek_pointer (param_values + 2),
            data2);
}
#define dbus_glib_marshal_daemon_NONE__BOXED_POINTER	dbus_glib_marshal_daemon_VOID__BOXED_POINTER

/* NONE:BOXED,STRING,UINT64,STRING,BOXED,POINTER */
extern void dbus_glib_marshal_daemon_VOID__BOXED_STRING_UINT64_STRING_BOXED_POINTER (GClosure     *closure,
                                                                                     GValue       *return_value,
                                                                                     guint         n_param_values,
                                                                                     const GValue *param_values,
                                                                                     gpointer      invocation_hint,
                                                                                     gpointer      marshal_data);
void
dbus_glib_marshal_daemon_VOID__BOXED_STRING_UINT64_STRING_BOXED_POINTER (GClosure     *closure,
                                                                         GValue       *return_value G_GNUC_UNUSED,
                                                                         guint         n_param_values,
                                                                         const GValue *param_values,
                                                                         gpointer      invocation_hint G_GNUC_UNUSED,
                                                                         gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__BOXED_STRING_UINT64_STRING_BOXED_POINTER) (gpointer     data1,
                                                                               gpointer     arg_1,
                                                                               gpointer     arg_2,
                                                                               guint64      arg_3,
                                                                               gpointer     arg_4,
                                                                               gpointer     arg_5,
                                                                               gpointer     arg_6,
                                                                               gpointer     data2);
  register GMarshalFunc_VOID__BOXED_STRING_UINT64_STRING_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 7);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__BOXED_STRING_UINT64_STRING_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_boxed (param_values + 1),
            g_marshal_value_peek_string (param_values + 2),
            g_marshal_value_peek_uint64 (param_values + 3),
            g_marshal_value_peek_string (param_values + 4),
            g_marshal_value_peek_boxed (param_values + 5),
            g_marshal_value_peek_pointer (param_values + 6),
            data2);
}
#define dbus_glib_marshal_daemon_NONE__BOXED_STRING_UINT64_STRING_BOXED_POINTER	dbus_glib_marshal_daemon_VOID__BOXED_STRING_UINT64_STRING_BOXED_POINTER

/* NONE:STRING,BOXED,POINTER */
extern void dbus_glib_marshal_daemon_VOID__STRING_BOXED_POINTER (GClosure     *closure,
                                                                 GValue       *return_value,
                                                                 guint         n_param_values,
                                                                 const GValue *param_values,
                                                                 gpointer      invocation_hint,
                                                                 gpointer      marshal_data);
void
dbus_glib_marshal_daemon_VOID__STRING_BOXED_POINTER (GClosure     *closure,
                                                     GValue       *return_value G_GNUC_UNUSED,
                                                     guint         n_param_values,
                                                     const GValue *param_values,
                                                     gpointer      invocation_hint G_GNUC_UNUSED,
                                                     gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_BOXED_POINTER) (gpointer     data1,
                                                           gpointer     arg_1,
                                                           gpointer     arg_2,
                                                           gpointer     arg_3,
                                                           gpointer     data2);
  register GMarshalFunc_VOID__STRING_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_boxed (param_values + 2),
            g_marshal_value_peek_pointer (param_values + 3),
            data2);
}
#define dbus_glib_marshal_daemon_NONE__STRING_BOXED_POINTER	dbus_glib_marshal_daemon_VOID__STRING_BOXED_POINTER

/* NONE:STRING,POINTER */
extern void dbus_glib_marshal_daemon_VOID__STRING_POINTER (GClosure     *closure,
                                                           GValue       *return_value,
                                                           guint         n_param_values,
                                                           const GValue *param_values,
                                                           gpointer      invocation_hint,
                                                           gpointer      marshal_data);
void
dbus_glib_marshal_daemon_VOID__STRING_POINTER (GClosure     *closure,
                                               GValue       *return_value G_GNUC_UNUSED,
                                               guint         n_param_values,
                                               const GValue *param_values,
                                               gpointer      invocation_hint G_GNUC_UNUSED,
                                               gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_POINTER) (gpointer     data1,
                                                     gpointer     arg_1,
                                                     gpointer     arg_2,
                                                     gpointer     data2);
  register GMarshalFunc_VOID__STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_pointer (param_values + 2),
            data2);
}
#define dbus_glib_marshal_daemon_NONE__STRING_POINTER	dbus_glib_marshal_daemon_VOID__STRING_POINTER

/* NONE:STRING,BOXED,BOXED,POINTER */
extern void dbus_glib_marshal_daemon_VOID__STRING_BOXED_BOXED_POINTER (GClosure     *closure,
                                                                       GValue       *return_value,
                                                                       guint         n_param_values,
                                                                       const GValue *param_values,
                                                                       gpointer      invocation_hint,
                                                                       gpointer      marshal_data);
void
dbus_glib_marshal_daemon_VOID__STRING_BOXED_BOXED_POINTER (GClosure     *closure,
                                                           GValue       *return_value G_GNUC_UNUSED,
                                                           guint         n_param_values,
                                                           const GValue *param_values,
                                                           gpointer      invocation_hint G_GNUC_UNUSED,
                                                           gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_BOXED_BOXED_POINTER) (gpointer     data1,
                                                                 gpointer     arg_1,
                                                                 gpointer     arg_2,
                                                                 gpointer     arg_3,
                                                                 gpointer     arg_4,
                                                                 gpointer     data2);
  register GMarshalFunc_VOID__STRING_BOXED_BOXED_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 5);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_BOXED_BOXED_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_boxed (param_values + 2),
            g_marshal_value_peek_boxed (param_values + 3),
            g_marshal_value_peek_pointer (param_values + 4),
            data2);
}
#define dbus_glib_marshal_daemon_NONE__STRING_BOXED_BOXED_POINTER	dbus_glib_marshal_daemon_VOID__STRING_BOXED_BOXED_POINTER

/* NONE:POINTER */
#define dbus_glib_marshal_daemon_VOID__POINTER	g_cclosure_marshal_VOID__POINTER
#define dbus_glib_marshal_daemon_NONE__POINTER	dbus_glib_marshal_daemon_VOID__POINTER

G_END_DECLS

#endif /* __dbus_glib_marshal_daemon_MARSHAL_H__ */

#include <dbus/dbus-glib.h>
static const DBusGMethodInfo dbus_glib_daemon_methods[] = {
  { (GCallback) daemon_enumerate_adapters, dbus_glib_marshal_daemon_NONE__POINTER, 0 },
  { (GCallback) daemon_enumerate_expanders, dbus_glib_marshal_daemon_NONE__POINTER, 61 },
  { (GCallback) daemon_enumerate_ports, dbus_glib_marshal_daemon_NONE__POINTER, 123 },
  { (GCallback) daemon_enumerate_devices, dbus_glib_marshal_daemon_NONE__POINTER, 181 },
  { (GCallback) daemon_enumerate_device_files, dbus_glib_marshal_daemon_NONE__POINTER, 241 },
  { (GCallback) daemon_find_device_by_device_file, dbus_glib_marshal_daemon_NONE__STRING_POINTER, 310 },
  { (GCallback) daemon_find_device_by_major_minor, dbus_glib_marshal_daemon_NONE__INT64_INT64_POINTER, 390 },
  { (GCallback) daemon_drive_inhibit_all_polling, dbus_glib_marshal_daemon_NONE__BOXED_POINTER, 488 },
  { (GCallback) daemon_drive_uninhibit_all_polling, dbus_glib_marshal_daemon_NONE__STRING_POINTER, 565 },
  { (GCallback) daemon_drive_set_all_spindown_timeouts, dbus_glib_marshal_daemon_NONE__INT_BOXED_POINTER, 627 },
  { (GCallback) daemon_drive_unset_all_spindown_timeouts, dbus_glib_marshal_daemon_NONE__STRING_POINTER, 729 },
  { (GCallback) daemon_linux_lvm2_vg_start, dbus_glib_marshal_daemon_NONE__STRING_BOXED_POINTER, 796 },
  { (GCallback) daemon_linux_lvm2_vg_stop, dbus_glib_marshal_daemon_NONE__STRING_BOXED_POINTER, 861 },
  { (GCallback) daemon_linux_lvm2_vg_set_name, dbus_glib_marshal_daemon_NONE__STRING_STRING_POINTER, 925 },
  { (GCallback) daemon_linux_lvm2_vg_add_pv, dbus_glib_marshal_daemon_NONE__STRING_BOXED_BOXED_POINTER, 988 },
  { (GCallback) daemon_linux_lvm2_vg_remove_pv, dbus_glib_marshal_daemon_NONE__STRING_STRING_BOXED_POINTER, 1073 },
  { (GCallback) daemon_linux_lvm2_lv_set_name, dbus_glib_marshal_daemon_NONE__STRING_STRING_STRING_POINTER, 1156 },
  { (GCallback) daemon_linux_lvm2_lv_start, dbus_glib_marshal_daemon_NONE__STRING_STRING_BOXED_POINTER, 1234 },
  { (GCallback) daemon_linux_lvm2_lv_remove, dbus_glib_marshal_daemon_NONE__STRING_STRING_BOXED_POINTER, 1314 },
  { (GCallback) daemon_linux_lvm2_lv_create, dbus_glib_marshal_daemon_NONE__STRING_STRING_UINT64_UINT_UINT64_UINT_BOXED_STRING_BOXED_POINTER, 1395 },
  { (GCallback) daemon_linux_md_start, dbus_glib_marshal_daemon_NONE__BOXED_BOXED_POINTER, 1582 },
  { (GCallback) daemon_linux_md_create, dbus_glib_marshal_daemon_NONE__BOXED_STRING_UINT64_STRING_BOXED_POINTER, 1665 },
  { (GCallback) daemon_inhibit, dbus_glib_marshal_daemon_NONE__POINTER, 1784 },
  { (GCallback) daemon_uninhibit, dbus_glib_marshal_daemon_NONE__STRING_POINTER, 1833 },
};

const DBusGObjectInfo dbus_glib_daemon_object_info = {
  0,
  dbus_glib_daemon_methods,
  24,
"org.freedesktop.UDisks\0EnumerateAdapters\0A\0devices\0O\0F\0N\0ao\0\0org.freedesktop.UDisks\0EnumerateExpanders\0A\0devices\0O\0F\0N\0ao\0\0org.freedesktop.UDisks\0EnumeratePorts\0A\0devices\0O\0F\0N\0ao\0\0org.freedesktop.UDisks\0EnumerateDevices\0A\0devices\0O\0F\0N\0ao\0\0org.freedesktop.UDisks\0EnumerateDeviceFiles\0A\0device_files\0O\0F\0N\0as\0\0org.freedesktop.UDisks\0FindDeviceByDeviceFile\0A\0device_file\0I\0s\0device\0O\0F\0N\0o\0\0org.freedesktop.UDisks\0FindDeviceByMajorMinor\0A\0device_major\0I\0x\0device_minor\0I\0x\0device\0O\0F\0N\0o\0\0org.freedesktop.UDisks\0DriveInhibitAllPolling\0A\0options\0I\0as\0cookie\0O\0F\0N\0s\0\0org.freedesktop.UDisks\0DriveUninhibitAllPolling\0A\0cookie\0I\0s\0\0org.freedesktop.UDisks\0DriveSetAllSpindownTimeouts\0A\0timeout_seconds\0I\0i\0options\0I\0as\0cookie\0O\0F\0N\0s\0\0org.freedesktop.UDisks\0DriveUnsetAllSpindownTimeouts\0A\0cookie\0I\0s\0\0org.freedesktop.UDisks\0LinuxLvm2VGStart\0A\0uuid\0I\0s\0options\0I\0as\0\0org.freedesktop.UDisks\0LinuxLvm2VGStop\0A\0uuid\0I\0s\0options\0I\0as\0\0org.freedesktop.UDisks\0LinuxLvm2VGSetName\0A\0uuid\0I\0s\0name\0I\0s\0\0org.freedesktop.UDisks\0LinuxLvm2VGAddPV\0A\0uuid\0I\0s\0physical_volume\0I\0o\0options\0I\0as\0\0org.freedesktop.UDisks\0LinuxLvm2VGRemovePV\0A\0vg_uuid\0I\0s\0pv_uuid\0I\0s\0options\0I\0as\0\0org.freedesktop.UDisks\0LinuxLvm2LVSetName\0A\0group_uuid\0I\0s\0uuid\0I\0s\0name\0I\0s\0\0org.freedesktop.UDisks\0LinuxLvm2LVStart\0A\0group_uuid\0I\0s\0uuid\0I\0s\0options\0I\0as\0\0org.freedesktop.UDisks\0LinuxLvm2LVRemove\0A\0group_uuid\0I\0s\0uuid\0I\0s\0options\0I\0as\0\0org.freedesktop.UDisks\0LinuxLvm2LVCreate\0A\0group_uuid\0I\0s\0name\0I\0s\0size\0I\0t\0num_stripes\0I\0u\0stripe_size\0I\0t\0num_mirrors\0I\0u\0options\0I\0as\0fstype\0I\0s\0fsoptions\0I\0as\0created_device\0O\0F\0N\0o\0\0org.freedesktop.UDisks\0LinuxMdStart\0A\0components\0I\0ao\0options\0I\0as\0device\0O\0F\0N\0o\0\0org.freedesktop.UDisks\0LinuxMdCreate\0A\0components\0I\0ao\0level\0I\0s\0stripe_size\0I\0t\0name\0I\0s\0options\0I\0as\0device\0O\0F\0N\0o\0\0org.freedesktop.UDisks\0Inhibit\0A\0cookie\0O\0F\0N\0s\0\0org.freedesktop.UDisks\0Uninhibit\0A\0cookie\0I\0s\0\0\0",
"org.freedesktop.UDisks\0DeviceAdded\0org.freedesktop.UDisks\0DeviceRemoved\0org.freedesktop.UDisks\0DeviceChanged\0org.freedesktop.UDisks\0DeviceJobChanged\0org.freedesktop.UDisks\0AdapterAdded\0org.freedesktop.UDisks\0AdapterRemoved\0org.freedesktop.UDisks\0AdapterChanged\0org.freedesktop.UDisks\0ExpanderAdded\0org.freedesktop.UDisks\0ExpanderRemoved\0org.freedesktop.UDisks\0ExpanderChanged\0org.freedesktop.UDisks\0PortAdded\0org.freedesktop.UDisks\0PortRemoved\0org.freedesktop.UDisks\0PortChanged\0\0",
"org.freedesktop.UDisks\0DaemonVersion\0org.freedesktop.UDisks\0DaemonIsInhibited\0org.freedesktop.UDisks\0SupportsLuksDevices\0org.freedesktop.UDisks\0KnownFilesystems\0\0"
};

